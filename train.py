{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7d361cc6-8d4d-4c3d-b7aa-ca536229552c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data loaded, age cleaned, duplicates dropped.\n",
      "Missing values handled.\n",
      "Minor kategori digabung.\n",
      "Encoded & scaled.\n",
      "Model trained.\n",
      "Accuracy: 0.9523809523809523\n",
      "Precision: 0.951204533716849\n",
      "Recall: 0.9501993901008678\n",
      "F1-score: 0.9501654138128434\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      1.00      0.96        27\n",
      "           1       0.89      0.86      0.88        29\n",
      "           2       0.95      1.00      0.97        35\n",
      "           3       1.00      0.97      0.98        30\n",
      "           4       1.00      1.00      1.00        32\n",
      "           5       0.92      0.86      0.89        28\n",
      "           6       0.97      0.97      0.97        29\n",
      "\n",
      "    accuracy                           0.95       210\n",
      "   macro avg       0.95      0.95      0.95       210\n",
      "weighted avg       0.95      0.95      0.95       210\n",
      "\n",
      "Model & pipeline saved to best_model.pkl\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pickle\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report\n",
    "\n",
    "class ObesityModelTrainer:\n",
    "    def __init__(self, data_path):\n",
    "        self.data_path = data_path\n",
    "        self.df = None\n",
    "        self.label_encoder = None\n",
    "        self.scaler = None\n",
    "        self.feature_names = None\n",
    "        self.model = None\n",
    "        self.target = \"NObeyesdad\"\n",
    "        self.numerical = ['Age', 'Height', 'Weight', 'FCVC', 'NCP', 'CH2O', 'FAF', 'TUE']\n",
    "        self.categorical = [\n",
    "            'Gender', 'family_history_with_overweight', 'FAVC', 'SMOKE', 'SCC',\n",
    "            'CAEC', 'CALC', 'MTRANS'\n",
    "        ]\n",
    "\n",
    "    def load_data(self):\n",
    "        df = pd.read_csv(self.data_path)\n",
    "        # Anomali age: \"44 years\" -> 44\n",
    "        def clean_age(x):\n",
    "            if isinstance(x, str):\n",
    "                if 'year' in x:\n",
    "                    return int(x.split()[0])\n",
    "                elif x.isdigit():\n",
    "                    return int(x)\n",
    "                else:\n",
    "                    return np.nan\n",
    "            elif pd.isna(x):\n",
    "                return np.nan\n",
    "            else:\n",
    "                return int(x)\n",
    "        df['Age'] = df['Age'].apply(clean_age)\n",
    "        # Drop duplikat\n",
    "        df = df.drop_duplicates().reset_index(drop=True)\n",
    "        self.df = df\n",
    "        print(\"Data loaded, age cleaned, duplicates dropped.\")\n",
    "\n",
    "    def handle_missing(self):\n",
    "        df = self.df\n",
    "        # Impute numerik\n",
    "        for col in self.numerical:\n",
    "            if df[col].isnull().sum() > 0:\n",
    "                skew = df[col].skew()\n",
    "                fill_value = df[col].median() if abs(skew) > 1 else df[col].mean()\n",
    "                df[col] = df[col].fillna(fill_value)\n",
    "        # Impute kategorikal\n",
    "        for col in self.categorical + [self.target]:\n",
    "            if df[col].isnull().sum() > 0:\n",
    "                mode_val = df[col].mode().iloc[0]\n",
    "                df[col] = df[col].fillna(mode_val)\n",
    "        # Drop sisa missing (jika ada)\n",
    "        df = df.dropna().reset_index(drop=True)\n",
    "        self.df = df\n",
    "        print(\"Missing values handled.\")\n",
    "\n",
    "    def handle_categorical(self):\n",
    "        df = self.df\n",
    "        # Gabung minor kategori\n",
    "        df['CAEC'] = df['CAEC'].replace({'Always': 'Often', 'Frequently': 'Often', 'no': 'Never'})\n",
    "        df['CALC'] = df['CALC'].replace({'Frequently': 'Sometimes'})\n",
    "        df['MTRANS'] = df['MTRANS'].replace({'Walking': 'Other', 'Bike': 'Other', 'Motorbike': 'Other'})\n",
    "        self.df = df\n",
    "        print(\"Minor kategori digabung.\")\n",
    "\n",
    "    def encode_and_scale(self):\n",
    "        df = self.df.copy()\n",
    "        # One-hot untuk fitur kategorikal\n",
    "        df = pd.get_dummies(df, columns=self.categorical, drop_first=True)\n",
    "        # Label encoding target\n",
    "        le = LabelEncoder()\n",
    "        df[self.target] = le.fit_transform(df[self.target])\n",
    "        self.label_encoder = le\n",
    "        # Pisah X, y\n",
    "        X = df.drop(columns=[self.target])\n",
    "        y = df[self.target]\n",
    "        # Train-test split stratified\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "        # Scaling numerik saja\n",
    "        scaler = StandardScaler()\n",
    "        X_train.loc[:, self.numerical] = scaler.fit_transform(X_train[self.numerical])\n",
    "        X_test.loc[:, self.numerical] = scaler.transform(X_test[self.numerical])\n",
    "        self.scaler = scaler\n",
    "        self.X_train, self.X_test = X_train, X_test\n",
    "        self.y_train, self.y_test = y_train, y_test\n",
    "        self.feature_names = X_train.columns.tolist()\n",
    "        print(\"Encoded & scaled.\")\n",
    "\n",
    "    def train(self):\n",
    "        # Param terbaik hasil gridsearch\n",
    "        self.model = RandomForestClassifier(\n",
    "            class_weight='balanced',\n",
    "            max_depth=None,\n",
    "            min_samples_leaf=1,\n",
    "            min_samples_split=2,\n",
    "            n_estimators=200,\n",
    "            random_state=42\n",
    "        )\n",
    "        self.model.fit(self.X_train, self.y_train)\n",
    "        print(\"Model trained.\")\n",
    "\n",
    "    def evaluate(self):\n",
    "        y_pred = self.model.predict(self.X_test)\n",
    "        print(\"Accuracy:\", accuracy_score(self.y_test, y_pred))\n",
    "        print(\"Precision:\", precision_score(self.y_test, y_pred, average='macro'))\n",
    "        print(\"Recall:\", recall_score(self.y_test, y_pred, average='macro'))\n",
    "        print(\"F1-score:\", f1_score(self.y_test, y_pred, average='macro'))\n",
    "        print(classification_report(self.y_test, y_pred))\n",
    "\n",
    "    def save(self, path=\"best_model.pkl\"):\n",
    "        with open(path, \"wb\") as f:\n",
    "            pickle.dump({\n",
    "                \"model\": self.model,\n",
    "                \"scaler\": self.scaler,\n",
    "                \"label_encoder\": self.label_encoder,\n",
    "                \"feature_names\": self.feature_names,\n",
    "                \"numerical\": self.numerical\n",
    "            }, f)\n",
    "        print(f\"Model & pipeline saved to {path}\")\n",
    "\n",
    "# --- Training ---\n",
    "if __name__ == \"__main__\":\n",
    "    trainer = ObesityModelTrainer(\"ObesityDataSet1.csv\")\n",
    "    trainer.load_data()\n",
    "    trainer.handle_missing()\n",
    "    trainer.handle_categorical()\n",
    "    trainer.encode_and_scale()\n",
    "    trainer.train()\n",
    "    trainer.evaluate()\n",
    "    trainer.save()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e28a2881-f911-4549-a4c5-58fef48d1fcd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
